---
export const prerender = false;

import Layout from '../layouts/Layout.astro';
import Card from '../components/ui/Card.astro';
import CardHeader from '../components/ui/CardHeader.astro';
import CardTitle from '../components/ui/CardTitle.astro';
import CardDescription from '../components/ui/CardDescription.astro';
import CardContent from '../components/ui/CardContent.astro';
import { getPortfolioData } from '../lib/data';
import '../styles/globals.css';

let portfolioData;
try {
  portfolioData = await getPortfolioData(Astro.locals.runtime.env);
} catch (error) {
  console.error('Error loading data:', error);
  throw error;
}

// Filter out archived works for public display and sort by year (latest first)
const { works } = {
  works: portfolioData.works
    .filter(work => !work.archived)
    .sort((a, b) => parseInt(b.year) - parseInt(a.year))
};
---

<Layout title="FemiTaofeeq - Cinematographer Portfolio">
  <div class="container mx-auto px-4 py-12">
    <!-- Hero Section -->
    <section class="text-center mb-16">
      <h1 class="text-5xl font-bold mb-4">FemiTaofeeq</h1>
      <p class="text-xl text-muted-foreground mb-2">Cinematographer</p>
      <p class="text-muted-foreground">Lagos, Nigeria</p>
    </section>

    <!-- Works Grid -->
    <section>
      <h2 class="text-3xl font-bold mb-8">Recent Works</h2>
      <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
        {works.map((work) => (
          <div class="group cursor-pointer work-item" data-work-id={work.id}>
            <div class="aspect-[4/3] overflow-hidden rounded-lg bg-gray-100">
              <img 
                src={work.thumbnailUrl} 
                alt={work.title}
                class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                loading="lazy"
              />
            </div>
          </div>
        ))}
      </div>
    </section>
    
    <!-- Image Modal -->
    <div id="imageModal" class="fixed inset-0 bg-black/90 backdrop-blur-sm z-50 hidden items-center justify-center p-4">
      <div class="relative max-w-5xl max-h-full">
        <button id="closeModal" class="absolute -top-12 right-0 text-white hover:text-gray-300 transition-colors">
          <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <line x1="18" y1="6" x2="6" y2="18"></line>
            <line x1="6" y1="6" x2="18" y2="18"></line>
          </svg>
        </button>
        <img id="modalImage" src="" alt="" class="max-w-full max-h-full object-contain rounded-lg" />
        <div id="modalInfo" class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 to-transparent p-6 rounded-b-lg">
          <h3 id="modalTitle" class="text-white text-xl font-bold mb-2"></h3>
          <p id="modalDescription" class="text-gray-200 text-sm mb-2"></p>
          <div id="modalMeta" class="text-gray-300 text-xs flex items-center gap-4">
            <span id="modalCategory"></span>
            <span>•</span>
            <span id="modalYear"></span>
            <span>•</span>
            <span id="modalClient"></span>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script define:vars={{ works }}>
  // Modal functionality
  const modal = document.getElementById('imageModal');
  const modalImage = document.getElementById('modalImage');
  const modalTitle = document.getElementById('modalTitle');
  const modalDescription = document.getElementById('modalDescription');
  const modalCategory = document.getElementById('modalCategory');
  const modalYear = document.getElementById('modalYear');
  const modalClient = document.getElementById('modalClient');
  const closeModal = document.getElementById('closeModal');
  
  // Open modal when work item is clicked
  document.querySelectorAll('.work-item').forEach(item => {
    item.addEventListener('click', () => {
      const workId = item.dataset.workId;
      const work = works.find(w => w.id === workId);
      
      if (work) {
        modalImage.src = work.thumbnailUrl;
        modalImage.alt = work.title;
        modalTitle.textContent = work.title;
        modalDescription.textContent = work.description;
        modalCategory.textContent = work.category;
        modalYear.textContent = work.year;
        modalClient.textContent = `Client: ${work.client}`;
        
        modal.classList.remove('hidden');
        modal.classList.add('flex');
        document.body.style.overflow = 'hidden';
      }
    });
  });
  
  // Close modal
  function closeImageModal() {
    modal.classList.add('hidden');
    modal.classList.remove('flex');
    document.body.style.overflow = '';
  }
  
  closeModal.addEventListener('click', closeImageModal);
  modal.addEventListener('click', (e) => {
    if (e.target === modal) closeImageModal();
  });
  
  // ESC key to close
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && !modal.classList.contains('hidden')) {
      closeImageModal();
    }
  });
</script>
