---
export const prerender = false;

import Layout from '../../../../layouts/Layout.astro';
import MarkdownEditor from '../../../../components/MarkdownEditor.astro';
import '../../../../styles/globals.css';

const { id } = Astro.params;
---

<Layout title={`Edit Blog Post - Qeefoat`}>
  <div class="container mx-auto px-4 py-12">
    <div class="max-w-4xl mx-auto">
      <div class="flex items-center justify-between mb-8">
        <h1 class="text-4xl font-bold">Edit Blog Post</h1>
        <a href="/qeefoat/blog" class="text-primary hover:underline">‚Üê Back to Blog</a>
      </div>
      
      <div class="bg-card border rounded-lg p-6">
        <form id="edit-blog-form" class="space-y-4">
          <!-- Blog Header -->
          <div class="border-b pb-4 mb-4">
            <h3 class="text-lg font-medium mb-3">üìÑ Blog Header</h3>
            <div class="space-y-4">
              <div>
                <label for="title" class="block text-sm font-medium mb-2">Title</label>
                <input type="text" id="title" name="title" required 
                       class="w-full px-3 py-2 border border-input rounded-md bg-background" />
              </div>
              
              <div>
                <label for="slug" class="block text-sm font-medium mb-2">Slug</label>
                <input type="text" id="slug" name="slug" required 
                       class="w-full px-3 py-2 border border-input rounded-md bg-background" />
              </div>

              <div>
                <label for="excerpt" class="block text-sm font-medium mb-2">Excerpt</label>
                <textarea id="excerpt" name="excerpt" required rows="3"
                          class="w-full px-3 py-2 border border-input rounded-md bg-background"></textarea>
              </div>
              
              <div>
                <label for="imageUrl" class="block text-sm font-medium mb-2">Blog Image</label>
                <div class="space-y-2">
                  <input type="file" id="imageFile" name="imageFile" accept="image/*"
                         class="w-full px-3 py-2 border border-input rounded-md bg-background file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-medium file:bg-primary file:text-primary-foreground hover:file:bg-primary/90" />
                  <div class="text-xs text-muted-foreground">
                    Or use URL: 
                    <input type="url" id="imageUrl" name="imageUrl" placeholder="https://example.com/image.jpg"
                           class="ml-2 px-2 py-1 border border-input rounded text-xs bg-background" />
                  </div>
                  <!-- Image Preview -->
                  <div id="image-preview" class="hidden">
                    <img class="w-48 h-36 object-cover rounded-lg border" alt="Preview" />
                    <p class="text-xs text-muted-foreground mt-1">Current Image</p>
                  </div>
                </div>
              </div>
              
              <!-- Image History -->
              <div id="image-history" class="hidden">
                <label class="block text-sm font-medium mb-2">Previous Images</label>
                <div class="grid grid-cols-6 gap-2" id="history-grid">
                  <!-- Images will be loaded here -->
                </div>
                <p class="text-xs text-muted-foreground mt-1">Click any previous image to use it again</p>
              </div>
              
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label for="author" class="block text-sm font-medium mb-2">Author</label>
                  <input type="text" id="author" name="author" required 
                         class="w-full px-3 py-2 border border-input rounded-md bg-background" />
                </div>
                
                <div>
                  <label for="date" class="block text-sm font-medium mb-2">Date (YYYY-MM-DD)</label>
                  <input type="date" id="date" name="date" required 
                         class="w-full px-3 py-2 border border-input rounded-md bg-background" />
                </div>
              </div>
            </div>
          </div>

          <!-- Blog Sections -->
          <div>
            <div class="flex items-center justify-between mb-3">
              <h3 class="text-lg font-medium">üìù Blog Sections</h3>
              <button type="button" id="add-section-btn" 
                      class="bg-green-600 hover:bg-green-700 text-white px-3 py-1 rounded text-sm">
                + Add Section
              </button>
            </div>
            <div id="sections-container" class="space-y-4">
              <!-- Sections will be loaded here -->
            </div>
            <div class="text-sm text-muted-foreground mt-2">
              üí° Edit structured blog sections. Changes will be saved when you update the post.
            </div>
          </div>

          <!-- Legacy Content -->
          <div class="border-t pt-4">
            <div class="flex items-center justify-between mb-2">
              <label for="content" class="block text-sm font-medium">Legacy Content</label>
              <button type="button" id="toggle-legacy" class="text-xs text-muted-foreground hover:text-foreground">
                Show Legacy Editor
              </button>
            </div>
            <div id="legacy-content" class="hidden">
              <MarkdownEditor 
                id="content" 
                name="content" 
                required={false}
                rows={10}
                placeholder="Legacy content field..."
              />
              <div class="text-xs text-muted-foreground mt-1">
                This field is for backward compatibility. Use sections above for better organization.
              </div>
            </div>
          </div>
          
          <button type="submit" 
                  class="w-full bg-primary text-primary-foreground hover:bg-primary/90 px-4 py-2 rounded-md font-medium">
            Update Blog Post
          </button>
        </form>
        
        <div id="blog-message" class="mt-4 hidden"></div>
      </div>
    </div>
  </div>
</Layout>
<script define:vars={{ id }}>
  let currentBlogPost = null;
  let sectionCounter = 0;
  
  // Toggle legacy content editor
  document.getElementById('toggle-legacy').addEventListener('click', () => {
    const legacyContent = document.getElementById('legacy-content');
    const toggleBtn = document.getElementById('toggle-legacy');
    
    if (legacyContent.classList.contains('hidden')) {
      legacyContent.classList.remove('hidden');
      toggleBtn.textContent = 'Hide Legacy Editor';
    } else {
      legacyContent.classList.add('hidden');
      toggleBtn.textContent = 'Show Legacy Editor';
    }
  });

  // Add section functionality
  document.getElementById('add-section-btn').addEventListener('click', () => {
    addSection();
  });

  function addSection(subtitle = '', content = '', imageUrl = '', sectionId = '') {
    sectionCounter++;
    const sectionsContainer = document.getElementById('sections-container');
    
    const sectionDiv = document.createElement('div');
    sectionDiv.className = 'border rounded-lg p-4 bg-background';
    sectionDiv.setAttribute('data-section-id', sectionId);
    sectionDiv.innerHTML = `
      <div class="flex items-center justify-between mb-3">
        <h4 class="font-medium">Section ${sectionCounter}</h4>
        <button type="button" onclick="removeSection(this)" 
                class="text-red-600 hover:text-red-800 text-sm px-2 py-1 rounded hover:bg-red-50">
          Remove
        </button>
      </div>
      
      <div class="space-y-3">
        <div>
          <label class="block text-sm font-medium mb-1">Section Title/Subtitle</label>
          <input type="text" name="section-subtitle-${sectionCounter}" 
                 value="${subtitle}"
                 placeholder="e.g., Introduction, Main Point, Conclusion"
                 class="w-full px-3 py-2 border border-input rounded-md bg-background text-sm" />
        </div>
        
        <div>
          <label class="block text-sm font-medium mb-1">Section Content</label>
          <textarea name="section-content-${sectionCounter}" rows="4" 
                    placeholder="Write the content for this section (Markdown supported)..."
                    class="w-full px-3 py-2 border border-input rounded-md bg-background text-sm">${content}</textarea>
        </div>
        
        <div>
          <label class="block text-sm font-medium mb-1">Section Image (Optional)</label>
          <div class="space-y-2">
            <input type="file" name="section-image-${sectionCounter}" accept="image/*"
                   class="w-full px-2 py-1 border border-input rounded text-xs bg-background file:mr-2 file:py-1 file:px-2 file:rounded file:border-0 file:text-xs file:bg-muted" />
            <input type="url" name="section-image-url-${sectionCounter}" 
                   value="${imageUrl || ''}"
                   placeholder="Or paste image URL"
                   class="w-full px-2 py-1 border border-input rounded text-xs bg-background" />
            ${imageUrl ? `
              <div class="mt-2">
                <img src="${imageUrl}" alt="Section image" class="w-32 h-20 object-cover rounded border" />
                <p class="text-xs text-muted-foreground mt-1">Current section image</p>
              </div>
            ` : ''}
          </div>
        </div>
      </div>
    `;
    
    sectionsContainer.appendChild(sectionDiv);
  }

  window.removeSection = function(button) {
    button.closest('.border.rounded-lg').remove();
  };
  
  // Load blog post data
  async function loadBlogPostData() {
    try {
      const response = await fetch(`/api/blog/${id}`);
      if (!response.ok) {
        throw new Error('Blog post not found');
      }
      
      currentBlogPost = await response.json();
      
      // Populate form
      document.getElementById('title').value = currentBlogPost.title || '';
      document.getElementById('slug').value = currentBlogPost.slug || '';
      document.getElementById('excerpt').value = currentBlogPost.excerpt || '';
      document.getElementById('content').value = currentBlogPost.content || '';
      document.getElementById('imageUrl').value = currentBlogPost.imageUrl || '';
      document.getElementById('author').value = currentBlogPost.author || '';
      document.getElementById('date').value = currentBlogPost.date || '';
      
      // Show current image
      if (currentBlogPost.imageUrl) {
        showImagePreview(currentBlogPost.imageUrl);
      }
      
      // Show image history
      if (currentBlogPost.imageHistory && currentBlogPost.imageHistory.length > 0) {
        showImageHistory(currentBlogPost.imageHistory);
      }

      // Load sections
      if (currentBlogPost.sections && currentBlogPost.sections.length > 0) {
        // Clear sections container first
        document.getElementById('sections-container').innerHTML = '';
        sectionCounter = 0;
        
        // Sort sections by order and add them
        const sortedSections = [...currentBlogPost.sections].sort((a, b) => a.order - b.order);
        
        sortedSections.forEach(section => {
          addSection(section.subtitle, section.content, section.imageUrl, section.id);
        });
      } else {
        // Add default sections if none exist
        addSection('Introduction', '', '');
        addSection('Main Content', '', '');
        addSection('Conclusion', '', '');
      }
      
    } catch (error) {
      console.error('Error loading blog post:', error);
      document.getElementById('blog-message').innerHTML = 
        '<p class="text-red-600">Error loading blog post data.</p>';
      document.getElementById('blog-message').classList.remove('hidden');
    }
  }
  
  function showImagePreview(url) {
    const preview = document.getElementById('image-preview');
    const img = preview.querySelector('img');
    img.src = url;
    preview.classList.remove('hidden');
  }
  
  function showImageHistory(history) {
    const historySection = document.getElementById('image-history');
    const grid = document.getElementById('history-grid');
    
    grid.innerHTML = history.map(url => `
      <div class="cursor-pointer hover:opacity-80 transition-opacity" onclick="selectHistoryImage('${url}')">
        <img src="${url}" alt="Previous image" class="w-full aspect-square object-cover rounded border" />
      </div>
    `).join('');
    
    historySection.classList.remove('hidden');
  }
  
  window.selectHistoryImage = function(url) {
    document.getElementById('imageUrl').value = url;
    showImagePreview(url);
  };
  
  // Image preview functionality
  document.getElementById('imageFile').addEventListener('change', function(e) {
    const file = e.target.files[0];
    if (file) {
      // Clear the imageUrl field when a file is selected
      document.getElementById('imageUrl').value = ''; 
      const reader = new FileReader();
      reader.onload = function(e) {
        showImagePreview(e.target.result);
      };
      reader.readAsDataURL(file);
    }
  });
  
  // URL preview functionality
  document.getElementById('imageUrl').addEventListener('input', function(e) {
    const url = e.target.value;
    if (url && url.startsWith('http')) {
      showImagePreview(url);
    }
  });
  
  // Form submission
  document.getElementById('edit-blog-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    
    // Collect sections data
    const sections = [];
    const sectionElements = document.querySelectorAll('#sections-container > div');
    
    sectionElements.forEach((sectionEl, index) => {
      const subtitleInput = sectionEl.querySelector(`input[name^="section-subtitle-"]`);
      const contentTextarea = sectionEl.querySelector(`textarea[name^="section-content-"]`);
      const imageFile = sectionEl.querySelector(`input[name^="section-image-"]`);
      const imageUrl = sectionEl.querySelector(`input[name^="section-image-url-"]`);
      const sectionId = sectionEl.getAttribute('data-section-id');
      
      if (subtitleInput && contentTextarea) {
        const section = {
          id: sectionId || String(Date.now()) + '-' + index,
          subtitle: subtitleInput.value.trim(),
          content: contentTextarea.value.trim(),
          order: index
        };
        
        // Add image URL if provided
        if (imageUrl && imageUrl.value.trim()) {
          section.imageUrl = imageUrl.value.trim();
        }
        
        // Add section if it has content
        if (section.subtitle || section.content) {
          sections.push(section);
          
          // Add image file to FormData if provided
          if (imageFile && imageFile.files[0]) {
            formData.append(`section-image-${index}`, imageFile.files[0]);
          }
        }
      }
    });
    
    // Add sections data to form
    formData.append('sections', JSON.stringify(sections));
    
    const submitBtn = e.target.querySelector('button[type="submit"]');
    const originalText = submitBtn.textContent;
    
    submitBtn.textContent = 'Updating...';
    submitBtn.disabled = true;
    
    try {
      const response = await fetch(`/api/blog/${id}`, {
        method: 'PUT',
        body: formData,
      });
      
      const result = await response.json();
      
      if (response.ok) {
        document.getElementById('blog-message').innerHTML = 
          '<p class="text-green-600">Blog post updated successfully!</p>';
        document.getElementById('blog-message').classList.remove('hidden');
        
        // Reload to show updated image history
        setTimeout(loadBlogPostData, 1000);
      } else {
        throw new Error(result.error || 'Failed to update blog post');
      }
    } catch (error) {
      document.getElementById('blog-message').innerHTML = 
        `<p class="text-red-600">Error: ${error.message}</p>`;
      document.getElementById('blog-message').classList.remove('hidden');
    } finally {
      submitBtn.textContent = originalText;
      submitBtn.disabled = false;
    }
    
    // Hide message after 3 seconds
    setTimeout(() => {
      document.getElementById('blog-message').classList.add('hidden');
    }, 3000);
  });
  
  // Load data on page load
  loadBlogPostData();
</script>
