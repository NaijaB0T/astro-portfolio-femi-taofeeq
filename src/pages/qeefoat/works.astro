---
export const prerender = false;

import Layout from '../../layouts/Layout.astro';
import '../../styles/globals.css';
---

<Layout title="Manage Works - Qeefoat">
  <div class="container mx-auto px-4 py-12">
    <div class="max-w-4xl mx-auto">
      <div class="flex items-center justify-between mb-8">
        <h1 class="text-4xl font-bold">Manage Works</h1>
        <a href="/qeefoat" class="text-primary hover:underline">← Back to Qeefoat</a>
      </div>
      
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <!-- Add Work Form -->
        <div class="bg-card border rounded-lg p-6">
          <div class="flex items-center justify-between mb-6">
            <h2 class="text-2xl font-semibold">Add New Work</h2>
            <button type="button" id="test-r2" class="text-xs bg-muted hover:bg-muted/80 px-2 py-1 rounded">
              Test R2
            </button>
          </div>
          <form id="add-work-form" class="space-y-4">
            <div>
              <label for="title" class="block text-sm font-medium mb-2">Title</label>
              <input type="text" id="title" name="title" required 
                     class="w-full px-3 py-2 border border-input rounded-md bg-background" />
            </div>
            
            <div>
              <label for="description" class="block text-sm font-medium mb-2">Description</label>
              <textarea id="description" name="description" required rows="3"
                        class="w-full px-3 py-2 border border-input rounded-md bg-background"></textarea>
            </div>
            
            <div>
              <label for="thumbnailUrl" class="block text-sm font-medium mb-2">Thumbnail Image</label>
              <div class="space-y-2">
                <input type="file" id="thumbnailFile" name="thumbnailFile" accept="image/*"
                       class="w-full px-3 py-2 border border-input rounded-md bg-background file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-medium file:bg-primary file:text-primary-foreground hover:file:bg-primary/90" />
                <div class="text-xs text-muted-foreground">
                  Or use URL: 
                  <input type="url" id="thumbnailUrl" name="thumbnailUrl" placeholder="https://example.com/image.jpg"
                         class="ml-2 px-2 py-1 border border-input rounded text-xs bg-background" />
                </div>
                <!-- Image Preview -->
                <div id="thumbnail-preview" class="hidden">
                  <img class="w-32 h-24 object-cover rounded-lg border" alt="Preview" />
                  <p class="text-xs text-muted-foreground mt-1">Preview</p>
                </div>
              </div>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label for="category" class="block text-sm font-medium mb-2">Category</label>
                <select id="category" name="category" required 
                        class="w-full px-3 py-2 border border-input rounded-md bg-background">
                  <option value="">Select Category</option>
                  <option value="Short Film">Short Film</option>
                  <option value="Commercial">Commercial</option>
                  <option value="Music Video">Music Video</option>
                  <option value="Documentary">Documentary</option>
                  <option value="Film">Film</option>
                  <option value="TV Series">TV Series</option>
                </select>
              </div>              
              <div>
                <label for="year" class="block text-sm font-medium mb-2">Year</label>
                <input type="text" id="year" name="year" required 
                       class="w-full px-3 py-2 border border-input rounded-md bg-background" />
              </div>
            </div>
            
            <div>
              <label for="client" class="block text-sm font-medium mb-2">Client</label>
              <input type="text" id="client" name="client" required 
                     class="w-full px-3 py-2 border border-input rounded-md bg-background" />
            </div>
            
            <button type="submit" 
                    class="w-full bg-primary text-primary-foreground hover:bg-primary/90 px-4 py-2 rounded-md font-medium">
              Add Work
            </button>
          </form>
          
          <div id="work-message" class="mt-4 hidden"></div>
        </div>
        
        <!-- Current Works List -->
        <div class="bg-card border rounded-lg p-6">
          <h2 class="text-2xl font-semibold mb-6">Current Works</h2>
          <div id="works-list" class="space-y-4">
            <p class="text-muted-foreground">Loading works...</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  // Load and display current works
  async function loadWorks() {
    try {
      const response = await fetch('/api/qeefoat/works'); // Use qeefoat API
      const works = await response.json();
      
      const worksList = document.getElementById('works-list');
      if (works.length === 0) {
        worksList.innerHTML = '<p class="text-muted-foreground">No works found.</p>';
        return;
      }
      
      worksList.innerHTML = works.map(work => `
        <div class="border rounded-lg p-4 ${work.archived ? 'opacity-50 bg-red-50' : ''}">
          <div class="flex justify-between items-start">
            <div class="flex-1">
              <h3 class="font-semibold">${work.title}</h3>
              <p class="text-sm text-muted-foreground">${work.category} • ${work.year}</p>
              <p class="text-sm mt-2">${work.description}</p>
              ${work.archived ? '<span class="text-xs text-red-600 font-medium">ARCHIVED</span>' : ''}
            </div>
            <div class="flex gap-2">
              <a href="/qeefoat/works/edit/${work.id}" 
                 class="text-blue-600 hover:text-blue-800 text-sm px-2 py-1 rounded hover:bg-blue-50 transition-colors">
                Edit
              </a>
              ${!work.archived ? `
                <button onclick="deleteWork('${work.id}')" 
                        class="text-red-600 hover:text-red-800 text-sm px-2 py-1 rounded hover:bg-red-50 transition-colors">
                  Archive
                </button>
              ` : ''}
            </div>
          </div>
        </div>
      `).join('');
    } catch (error) {
      document.getElementById('works-list').innerHTML = 
        '<p class="text-red-500">Error loading works.</p>';
    }
  }
  
  // Delete/Archive work
  window.deleteWork = async function(workId) {
    if (!confirm('Are you sure you want to archive this work? It will be hidden from public view but remain accessible to search engines.')) {
      return;
    }
    
    try {
      const response = await fetch(`/api/works/${workId}`, {
        method: 'DELETE'
      });
      
      if (response.ok) {
        loadWorks(); // Reload list
      } else {
        const result = await response.json();
        alert(`Error: ${result.error}`);
      }
    } catch (error) {
      alert(`Error: ${error.message}`);
    }
  };  
  // Handle form submission
  document.getElementById('add-work-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    
    // Validate that either file or URL is provided
    const thumbnailFile = formData.get('thumbnailFile');
    const thumbnailUrl = formData.get('thumbnailUrl');
    
    if ((!thumbnailFile || thumbnailFile.size === 0) && !thumbnailUrl) {
      document.getElementById('work-message').innerHTML = 
        '<p class="text-red-600">Please upload an image file or provide an image URL.</p>';
      document.getElementById('work-message').classList.remove('hidden');
      return;
    }
    
    // Show loading state
    const submitBtn = e.target.querySelector('button[type="submit"]');
    const originalText = submitBtn.textContent;
    submitBtn.textContent = thumbnailFile && thumbnailFile.size > 0 ? 'Uploading...' : 'Adding...';
    submitBtn.disabled = true;
    
    // Clear previous messages
    document.getElementById('work-message').classList.add('hidden');
    
    try {
      console.log('Submitting work form with:', {
        hasFile: !!(thumbnailFile && thumbnailFile.size > 0),
        hasUrl: !!thumbnailUrl,
        fileSize: thumbnailFile ? thumbnailFile.size : 0
      });
      
      const response = await fetch('/api/works', {
        method: 'POST',
        body: formData,
      });
      
      const result = await response.json();
      console.log('API Response:', result);
      
      if (response.ok) {
        document.getElementById('work-message').innerHTML = 
          '<p class="text-green-600">Work added successfully!</p>';
        document.getElementById('work-message').classList.remove('hidden');
        e.target.reset();
        // Reset preview
        document.getElementById('thumbnail-preview').classList.add('hidden');
        loadWorks();
      } else {
        throw new Error(result.error || 'Failed to add work');
      }
    } catch (error) {
      console.error('Form submission error:', error);
      document.getElementById('work-message').innerHTML = 
        `<p class="text-red-600">Error: ${error.message}</p>`;
      document.getElementById('work-message').classList.remove('hidden');
    } finally {
      submitBtn.textContent = originalText;
      submitBtn.disabled = false;
    }
    
    // Hide message after 3 seconds
    setTimeout(() => {
      document.getElementById('work-message').classList.add('hidden');
    }, 3000);
  });
  
  // Load works on page load
  loadWorks();
  
  // Test R2 connection
  document.getElementById('test-r2').addEventListener('click', async () => {
    const btn = document.getElementById('test-r2');
    btn.textContent = 'Testing...';
    btn.disabled = true;
    
    try {
      const response = await fetch('/api/test-r2');
      const result = await response.json();
      
      if (result.success) {
        alert('R2 connection successful!');
      } else {
        alert(`R2 connection failed: ${result.error}`);
      }
    } catch (error) {
      alert(`R2 test error: ${error.message}`);
    } finally {
      btn.textContent = 'Test R2';
      btn.disabled = false;
    }
  });
  
  // Image preview functionality
  document.getElementById('thumbnailFile').addEventListener('change', function(e) {
    const file = e.target.files[0];
    const preview = document.getElementById('thumbnail-preview');
    const img = preview.querySelector('img');
    
    if (file) {
      const reader = new FileReader();
      reader.onload = function(e) {
        img.src = e.target.result;
        preview.classList.remove('hidden');
      };
      reader.readAsDataURL(file);
    } else {
      preview.classList.add('hidden');
    }
  });
  
  // URL preview functionality
  document.getElementById('thumbnailUrl').addEventListener('input', function(e) {
    const url = e.target.value;
    const preview = document.getElementById('thumbnail-preview');
    const img = preview.querySelector('img');
    
    if (url && url.startsWith('http')) {
      img.src = url;
      preview.classList.remove('hidden');
    } else {
      preview.classList.add('hidden');
    }
  });
</script>
