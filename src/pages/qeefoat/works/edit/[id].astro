---
export const prerender = false;

import Layout from '../../../../layouts/Layout.astro';
import '../../../../styles/globals.css';

const { id } = Astro.params;
---

<Layout title={`Edit Work - Qeefoat`}>
  <div class="container mx-auto px-4 py-12">
    <div class="max-w-4xl mx-auto">
      <div class="flex items-center justify-between mb-8">
        <h1 class="text-4xl font-bold">Edit Work</h1>
        <a href="/qeefoat/works" class="text-primary hover:underline">‚Üê Back to Works</a>
      </div>
      
      <div class="bg-card border rounded-lg p-6">
        <form id="edit-work-form" class="space-y-4">
          <div>
            <label for="title" class="block text-sm font-medium mb-2">Title</label>
            <input type="text" id="title" name="title" required 
                   class="w-full px-3 py-2 border border-input rounded-md bg-background" />
          </div>
          
          <div>
            <label for="description" class="block text-sm font-medium mb-2">Description</label>
            <textarea id="description" name="description" required rows="3"
                      class="w-full px-3 py-2 border border-input rounded-md bg-background"></textarea>
          </div>
          
          <div>
            <label for="thumbnailUrl" class="block text-sm font-medium mb-2">Thumbnail Image</label>
            <div class="space-y-2">
              <input type="file" id="thumbnailFile" name="thumbnailFile" accept="image/*"
                     class="w-full px-3 py-2 border border-input rounded-md bg-background file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-medium file:bg-primary file:text-primary-foreground hover:file:bg-primary/90" />
              <div class="text-xs text-muted-foreground">
                Or use URL: 
                <input type="url" id="thumbnailUrl" name="thumbnailUrl" placeholder="https://example.com/image.jpg"
                       class="ml-2 px-2 py-1 border border-input rounded text-xs bg-background" />
              </div>
              <!-- Image Preview -->
              <div id="thumbnail-preview" class="hidden">
                <img class="w-32 h-24 object-cover rounded-lg border" alt="Preview" />
                <p class="text-xs text-muted-foreground mt-1">Current Image</p>
              </div>
            </div>
          </div>
          
          <!-- Image History -->
          <div id="image-history" class="hidden">
            <label class="block text-sm font-medium mb-2">Previous Images</label>
            <div class="grid grid-cols-8 gap-2" id="history-grid">
              <!-- Images will be loaded here -->
            </div>
            <p class="text-xs text-muted-foreground mt-1">Click any previous image to use it again</p>
          </div>
          
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label for="category" class="block text-sm font-medium mb-2">Category</label>
              <select id="category" name="category" required 
                      class="w-full px-3 py-2 border border-input rounded-md bg-background">
                <option value="">Select Category</option>
                <option value="Short Film">Short Film</option>
                <option value="Commercial">Commercial</option>
                <option value="Music Video">Music Video</option>
                <option value="Documentary">Documentary</option>
                <option value="Film">Film</option>
                <option value="TV Series">TV Series</option>
              </select>
            </div>
            
            <div>
              <label for="year" class="block text-sm font-medium mb-2">Year</label>
              <input type="text" id="year" name="year" required 
                     class="w-full px-3 py-2 border border-input rounded-md bg-background" />
            </div>
          </div>
          
          <div>
            <label for="client" class="block text-sm font-medium mb-2">Client</label>
            <input type="text" id="client" name="client" required 
                   class="w-full px-3 py-2 border border-input rounded-md bg-background" />
          </div>
          
          <button type="submit" 
                  class="w-full bg-primary text-primary-foreground hover:bg-primary/90 px-4 py-2 rounded-md font-medium">
            Update Work
          </button>
        </form>
        
        <div id="work-message" class="mt-4 hidden"></div>
      </div>
    </div>
  </div>
</Layout>
<script define:vars={{ id }}>
  let currentWork = null;
  
  // Load work data
  async function loadWorkData() {
    try {
      const response = await fetch(`/api/works/${id}`);
      if (!response.ok) {
        throw new Error('Work not found');
      }
      
      currentWork = await response.json();
      
      // Populate form
      document.getElementById('title').value = currentWork.title;
      document.getElementById('description').value = currentWork.description;
      document.getElementById('thumbnailUrl').value = currentWork.thumbnailUrl;
      document.getElementById('category').value = currentWork.category;
      document.getElementById('year').value = currentWork.year;
      document.getElementById('client').value = currentWork.client;
      
      // Show current image
      if (currentWork.thumbnailUrl) {
        showImagePreview(currentWork.thumbnailUrl);
      }
      
      // Show image history
      if (currentWork.imageHistory && currentWork.imageHistory.length > 0) {
        showImageHistory(currentWork.imageHistory);
      }
    } catch (error) {
      console.error('Error loading work:', error);
      document.getElementById('work-message').innerHTML = 
        '<p class="text-red-600">Error loading work data.</p>';
      document.getElementById('work-message').classList.remove('hidden');
    }
  }
  
  function showImagePreview(url) {
    const preview = document.getElementById('thumbnail-preview');
    const img = preview.querySelector('img');
    img.src = url;
    preview.classList.remove('hidden');
  }
  
  function showImageHistory(history) {
    const historySection = document.getElementById('image-history');
    const grid = document.getElementById('history-grid');
    
    grid.innerHTML = history.map(url => `
      <div class="cursor-pointer hover:opacity-80 transition-opacity" onclick="selectHistoryImage('${url}')">
        <img src="${url}" alt="Previous image" class="w-full aspect-square object-cover rounded border" />
      </div>
    `).join('');
    
    historySection.classList.remove('hidden');
  }
  
  window.selectHistoryImage = function(url) {
    document.getElementById('thumbnailUrl').value = url;
    showImagePreview(url);
  };
  
  // Image preview functionality
  document.getElementById('thumbnailFile').addEventListener('change', function(e) {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = function(e) {
        showImagePreview(e.target.result);
      };
      reader.readAsDataURL(file);
    }
  });
  
  // URL preview functionality
  document.getElementById('thumbnailUrl').addEventListener('input', function(e) {
    const url = e.target.value;
    if (url && url.startsWith('http')) {
      showImagePreview(url);
    }
  });
  
  // Form submission
  document.getElementById('edit-work-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    const submitBtn = e.target.querySelector('button[type="submit"]');
    const originalText = submitBtn.textContent;
    
    submitBtn.textContent = 'Updating...';
    submitBtn.disabled = true;
    
    try {
      const response = await fetch(`/api/works/${id}`, {
        method: 'PUT',
        body: formData,
      });
      
      const result = await response.json();
      
      if (response.ok) {
        document.getElementById('work-message').innerHTML = 
          '<p class="text-green-600">Work updated successfully!</p>';
        document.getElementById('work-message').classList.remove('hidden');
        
        // Reload to show updated image history
        setTimeout(loadWorkData, 1000);
      } else {
        throw new Error(result.error || 'Failed to update work');
      }
    } catch (error) {
      document.getElementById('work-message').innerHTML = 
        `<p class="text-red-600">Error: ${error.message}</p>`;
      document.getElementById('work-message').classList.remove('hidden');
    } finally {
      submitBtn.textContent = originalText;
      submitBtn.disabled = false;
    }
    
    // Hide message after 3 seconds
    setTimeout(() => {
      document.getElementById('work-message').classList.add('hidden');
    }, 3000);
  });
  
  // Load data on page load
  loadWorkData();
</script>
